@charset "utf-8";

// required for sass compiler to be able to use variables, as well as
// intellisense, since it's just variables it should be stripped away when
// compiling anyways so it won't make a difference
// @import "../../modules/bulma/sass/utilities/_all.sass";


// --- UTILITY ---

// takes a color and returns a CSS filter that can turn black into that color
// https://stackoverflow.com/a/66365650
@mixin recolor($color: #000, $opacity: 1) {
    $r: calc(red($color) / 255);
    $g: calc(green($color) / 255);
    $b: calc(blue($color) / 255);
    $a: $opacity;
  
    // grayscale fallback if SVG from data url is not supported
    $lightness: lightness($color);
    filter: saturate(0%) brightness(0%) invert($lightness) opacity($opacity);
  
    // color filter
    $svg-filter-id: "recolor";
    filter: url('data:image/svg+xml;utf8,\
      <svg xmlns="http://www.w3.org/2000/svg">\
        <filter id="#{$svg-filter-id}" color-interpolation-filters="sRGB">\
          <feColorMatrix type="matrix" values="\
            0 0 0 0 #{$r}\
            0 0 0 0 #{$g}\
            0 0 0 0 #{$b}\
            0 0 0 #{$a} 0\
          "/>\
        </filter>\
      </svg>\
      ##{$svg-filter-id}');
}


// --- MAIN PAGE ---

* {
    // set transition for theme changes, if a specific class or element needs
    // to override it, it can be done for just that class/element
    transition: background-color 0.2s, color 0.2s;
}

#main {
    // offset everything slightly
    padding: 0 1rem 1rem 1rem;
}

// tab bar buttons
.tab-button {

    width: 3rem;

    &:hover {
        background-color: $background;
    }

    &#theme-button {
        border: none;
        border-left: 1px solid $border;
    }
}


// context menu
#context-menu {
    z-index: 100;
    position: absolute;
    display: block;
}

// --- TABLE ---

// clickable headers
th {
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    -khtml-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;

    cursor: pointer;

    &:hover {
        background-color: $table-row-hover-background-color !important;
    }
}

// sort icons
.sort-icon {
    display: flex;
    flex-direction: column;

    float: right;

    img {
        width: 1em;
        height: 0.4em;
        // color the black to the border color
        filter: invert(lightness($border)); 
    
        // add spacing in the middle 
        &:first-child {
            margin-bottom: 0.1em;
        }
    }
}

// sort icon colors
th[data-sorted="true"] {
    
    // descending
    &[data-sorted-direction="descending"] {
        
        &:not([data-sortable-type="numeric"]) {
            img:first-child {
                @include recolor($primary)
            }
        }
        
        // for numeric columns, the data-sorted-direction is reversed for some
        // reason
        &[data-sortable-type="numeric"] {
            img:last-child {
                @include recolor($primary)
            }
        }
        
        
    }

    // ascending
    &[data-sorted-direction="ascending"] {

        &:not([data-sortable-type="numeric"]) {
            img:last-child {
                @include recolor($primary)
            }
        }
        
        // for numeric columns, the data-sorted-direction is reversed for some
        // reason
        &[data-sortable-type="numeric"] {
            img:first-child {
                @include recolor($primary)
            }
        }
    }
    
}

.flex {
    display: flex;
}

.row {
    flex-direction: row;
}

.col {
    flex-direction: column;
}
// old firefox style tabs
.tabs {

    border-bottom: 1px solid $border;

    ul {
        border: none;
    }
    
    a {
        border-right: 1px solid $border;
        border-bottom: none;

        // remove background-color hover transition
        transition: color 0.2s;

        &:hover {
            background-color: $background;
        }
    }

    // active tabs
    li.is-active {
        position: relative;

        // line on top, using a pseudo-element so that it doesn't push the text
        // down
        ::after {
            content: "";
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 4px;
            background-color: $primary;
        }

        a {
            color: $primary;
        }

    }
}


// loading animation
#loading {
    width: max-content;
    margin: 1rem auto;
    text-align: center;
}